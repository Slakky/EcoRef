import pandas as pd
import os

configfile: 'pyseer_config.yaml'

phenotypes = pd.read_csv(config['base_dir'] + '/phenotypic_data.tsv', sep='\t')
wild = list(set([i for i in list(phenotypes['condition'])]))


rule all:
    input:
        expand(directory(os.path.join(config['output_dir'], '{pheno}.plot')), pheno=wild)

rule pheno_files:
    input:
        os.path.join(config['base_dir'], 'phenotypic_data.tsv')
    output:
        os.path.join(config['phenotype_dir'], '{pheno}.tsv')
    run:
        phenotypes = pd.read_csv(input[0], sep='\t')
        phenotypes = phenotypes.drop(phenotypes.columns[3:], axis=1)
        phenotypes.rename(columns={phenotypes.columns[0]: 'condition', phenotypes.columns[1]: 'strain', phenotypes.columns[2]: 'measurement'})
        for i in set(list(phenotypes.iloc[:, 0])):
            subset_pheno = phenotypes[phenotypes['condition'] == str(i)]
            subset_pheno = subset_pheno.drop(['condition'], axis=1)
            subset_pheno.to_csv(os.path.join(config['phenotype_dir'], '{}.tsv'.format(i)), sep='\t', index=False)


rule index_norm_vcf:
    input:
        os.path.join(config['base_dir'], 'snps.vcf.gz')
    output:
        os.path.join(config['base_dir'], 'snps.vcf.gz.tbi')
    shell:
        "gunzip {input}"
        "bcftools norm -m - {input} | bgzip -c > {input}"
        "tabix -p vcf {input} > {output}"


rule phenolist:
    input:
        os.path.join(config['phenotype_dir'], '{pheno}.tsv')
    output:
        os.path.join(config['output_dir'], '{pheno}_phenolist.tsv')
    params:
        path = config['output_dir']
    shell:
        "sed '1d' {input} | cut -f 1 > {output}"


rule kinship:
    input:
        phenolist = os.path.join(config['output_dir'], '{pheno}_phenolist.tsv'),
        vcf = os.path.join(config['base_dir'], 'snps.vcf.gz'),
        index = os.path.join(config['base_dir'], 'snps.vcf.gz.tbi')
    output:
        os.path.join(config['output_dir'], '{pheno}_K.tsv')
    shell:
        "similarity_pyseer --vcf {input.vcf} {input.phenolist} > {output}"


rule pyseer:
    input:
        pheno = os.path.join(config['phenotype_dir'], '{pheno}.tsv'),
        vcf = os.path.join(config['base_dir'], 'snps.vcf.gz'),
        K = os.path.join(config['output_dir'], '{pheno}_K.tsv')
    output:
        patterns = os.path.join(config['output_dir'], '{pheno}_patterns.txt'),
        lineage_file = os.path.join(config['output_dir'], '{pheno}.lineage'),
        out = os.path.join(config['output_dir'], '{pheno}.txt'),
        log = os.path.join(config['output_dir'], '{pheno}.out')
    params:
        min_af = config['min-af'],
        max_af = config['max-af'],
        cpu = config['cpu']
    shell:
        "pyseer --lmm --phenotypes {input.pheno} --vcf {input.vcf} --similarity {input.K} --output-patterns {output.patterns} --cpu {params.cpu} --min-af {params.min_af} --max-af {params.max_af} --lineage --lineage-file {output.lineage_file} --distances {input.K} > {output.out} 2> {output.log}"


rule to_plot:
    input:
        os.path.join(config['output_dir'], '{pheno}.txt')
    output:
        os.path.join(config['output_dir'], '{pheno}.plot')
    shell:
        'cat <(echo "CHR SNP BP P B MDS MAF H2") <(paste <(sed "1d" {input} | cut -f 1 | cut -d "_" -f 3,4) <(sed "1d" {input}  | cut -d "_" -f 2) <(sed "1d" {input}  | cut -f 4) <(sed "1d" {input}  | cut -f 5) <(sed "1d" {input}  | awk "{{ print ( $(NF) ) }}") <(sed "1d" {input}  | cut -f 2) <(sed "1d" {input} | cut -f 7) | awk "{{if($6>0.5){{print 26,$1,$2,$3,$4,$5,1-$6,$7}}else{{print 26,$1,$2,$3,$4,$5,$6,$7}}}}" ) | tr "" "\t" > {output}'
